// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApiServer.Db;

#nullable disable

namespace RestApiServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241001052500_UpdateDatabase-CreateNewForeignKeys")]
    partial class UpdateDatabaseCreateNewForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BoardDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BoardId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("RestApiServer.Db.CategoryEntry", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RestApiServer.Db.ChatEntry", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecondParticipantUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("RestApiServer.Db.ChatGroupEntry", b =>
                {
                    b.Property<string>("ChatGroupId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatGroupId");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("RestApiServer.Db.ChatMessageEntry", b =>
                {
                    b.Property<string>("ChatMessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatMessageContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EditedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RecipientUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatMessageId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("RestApiServer.Db.ContactEntry", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AboutMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactProfileImageBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RestApiServer.Db.GalleryItemEntry", b =>
                {
                    b.Property<string>("GalleryItemId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GalleryItemDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GalleryItemLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GalleryItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NumDislikes")
                        .HasColumnType("int");

                    b.Property<int>("NumLikes")
                        .HasColumnType("int");

                    b.HasKey("GalleryItemId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("GalleryItems");
                });

            modelBuilder.Entity("RestApiServer.Db.PermissionEntry", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RestApiServer.Db.PostEntry", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFirstPost")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PostReported")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReplyToPostId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("PostId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("RestApiServer.Db.RoleEntry", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RestApiServer.Db.RolePermissionEntry", b =>
                {
                    b.Property<string>("RolePermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.SystemPermissionEntry", b =>
                {
                    b.Property<string>("SystemPermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdminPermission")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuestPermission")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsModeratorPermission")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUserPermission")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SystemPermissionId");

                    b.ToTable("SystemPermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.Property<string>("ThreadId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasNewPosts")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfPosts")
                        .HasColumnType("int");

                    b.Property<string>("ThreadName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ThreadId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TopicId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TopicId");

                    b.HasIndex("BoardId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("RestApiServer.Db.UserPermissionEntry", b =>
                {
                    b.Property<string>("UserPermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SystemPermissionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserPermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.UserRefreshTokenEntry", b =>
                {
                    b.Property<string>("UserRefreshTokenId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserRefreshTokenId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("RestApiServer.Db.Users.UserEntry", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ForumUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalPosts")
                        .HasColumnType("int");

                    b.Property<string>("UserFirstname")
                        .HasColumnType("longtext");

                    b.Property<string>("UserLastname")
                        .HasColumnType("longtext");

                    b.Property<string>("UserProfileImageBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.CategoryEntry", "Category")
                        .WithMany("BoardsCreated")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestApiServer.Db.GalleryItemEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("GalleryItems")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("RestApiServer.Db.PostEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.ThreadEntry", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("RestApiServer.Db.RolePermissionEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.PermissionEntry", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.RoleEntry", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("ThreadsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.TopicEntry", "Topic")
                        .WithMany("Threads")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.BoardEntry", "Board")
                        .WithMany("TopicsCreated")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("TopicsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.Navigation("TopicsCreated");
                });

            modelBuilder.Entity("RestApiServer.Db.CategoryEntry", b =>
                {
                    b.Navigation("BoardsCreated");
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("RestApiServer.Db.Users.UserEntry", b =>
                {
                    b.Navigation("GalleryItems");

                    b.Navigation("ThreadsCreated");

                    b.Navigation("TopicsCreated");
                });
#pragma warning restore 612, 618
        }
    }
}
