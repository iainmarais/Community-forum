// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApiServer.Db;

#nullable disable

namespace RestApiServer.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RestApiServer.Database.Db.BannedUserEntry", b =>
                {
                    b.Property<string>("BanId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BanExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BanReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BanType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BanId");

                    b.ToTable("BannedUsers");
                });

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.Property<string>("BoardId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BoardDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BoardId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("RestApiServer.Db.CategoryEntry", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "729eea77-884d-4ece-a20e-0e205ca5e229",
                            CategoryDescription = "General discussions for the forum.",
                            CategoryName = "General",
                            CreatedByUserId = "",
                            DateMarkedForDelete = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsImportant = false,
                            IsMarkedForDelete = false
                        },
                        new
                        {
                            CategoryId = "70f6d2a8-f55b-474f-af88-7fcca957e7dd",
                            CategoryDescription = "Everything pertaining to computer and IT support can be discussed here.",
                            CategoryName = "Computer and IT Support",
                            CreatedByUserId = "",
                            DateMarkedForDelete = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsImportant = false,
                            IsMarkedForDelete = false
                        },
                        new
                        {
                            CategoryId = "5b74c7fd-dac3-45a3-ab3c-de0f877b6170",
                            CategoryDescription = "Everything pertaining to software development can be discussed here.",
                            CategoryName = "Software development",
                            CreatedByUserId = "",
                            DateMarkedForDelete = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsImportant = false,
                            IsMarkedForDelete = false
                        });
                });

            modelBuilder.Entity("RestApiServer.Db.ChatEntry", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecondParticipantUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("RestApiServer.Db.ChatGroupEntry", b =>
                {
                    b.Property<string>("ChatGroupId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatGroupName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatGroupId");

                    b.ToTable("ChatGroups");
                });

            modelBuilder.Entity("RestApiServer.Db.ChatMessageEntry", b =>
                {
                    b.Property<string>("ChatMessageId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChatGroupId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChatMessageContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EditedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RecipientUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChatMessageId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("RestApiServer.Db.ContactEntry", b =>
                {
                    b.Property<string>("ContactId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AboutMessage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactProfileImageBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RestApiServer.Db.GalleryItemEntry", b =>
                {
                    b.Property<string>("GalleryItemId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GalleryItemDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GalleryItemLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GalleryItemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumDislikes")
                        .HasColumnType("int");

                    b.Property<int>("NumLikes")
                        .HasColumnType("int");

                    b.HasKey("GalleryItemId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("GalleryItems");
                });

            modelBuilder.Entity("RestApiServer.Db.PermissionEntry", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            PermissionId = "content_createPosts",
                            Description = "Allows users and guests to create new posts, though with some restrictions on guests.",
                            PermissionName = "Content: Create Posts",
                            PermissionType = "Content"
                        },
                        new
                        {
                            PermissionId = "content_createThreads",
                            Description = "Allows registered users to create new threads.",
                            PermissionName = "Content: Create Threads",
                            PermissionType = "Content"
                        },
                        new
                        {
                            PermissionId = "content_uploadImages",
                            Description = "Allows a user to upload images to the gallery.",
                            PermissionName = "Content: Upload images",
                            PermissionType = "Content"
                        });
                });

            modelBuilder.Entity("RestApiServer.Db.PostEntry", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFirstPost")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PostReported")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ReplyToPostId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ReportedByUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ThreadId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("PostId");

                    b.HasIndex("ThreadId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("RestApiServer.Db.RequestEntry", b =>
                {
                    b.Property<string>("RequestId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ResolvedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SupportRequestContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SupportRequestTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TriageStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TriageType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LastUpdatedByUserId");

                    b.HasIndex("RequestId");

                    b.HasIndex("ResolvedByUserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("RestApiServer.Db.RoleEntry", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = "Admin",
                            Description = "Administrators have unrestricted access to administrate the forum and chat services.",
                            RoleName = "Administrator",
                            RoleType = "Admin"
                        },
                        new
                        {
                            RoleId = "CommunityManager",
                            Description = "Community managers are trusted community members of the forum.",
                            RoleName = "Community Manager",
                            RoleType = "CommunityManager"
                        },
                        new
                        {
                            RoleId = "ContentCreator",
                            Description = "Community members who create high-quality content.",
                            RoleName = "Content creator",
                            RoleType = "ContentCreator"
                        },
                        new
                        {
                            RoleId = "Moderator",
                            Description = "Moderators are trusted community members of the forum.",
                            RoleName = "Moderator",
                            RoleType = "Moderator"
                        },
                        new
                        {
                            RoleId = "JuniorModerator",
                            Description = "Moderators are trusted community members of the forum.",
                            RoleName = "Junior Moderator",
                            RoleType = "JuniorModerator"
                        },
                        new
                        {
                            RoleId = "User",
                            Description = "Users have limited rights to the forum, but can create posts and upload content, and edit their own posts.",
                            RoleName = "Regular User",
                            RoleType = "User"
                        },
                        new
                        {
                            RoleId = "Guest",
                            Description = "Guests have limited rights to the forum, and can only post in authorised areas.",
                            RoleName = "Guest",
                            RoleType = "Guest"
                        });
                });

            modelBuilder.Entity("RestApiServer.Db.RolePermissionEntry", b =>
                {
                    b.Property<string>("RolePermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.SystemPermissionEntry", b =>
                {
                    b.Property<string>("SystemPermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("SystemPermissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SystemPermissionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SystemPermissionId");

                    b.ToTable("SystemPermissions");

                    b.HasData(
                        new
                        {
                            SystemPermissionId = "dev_view_areas_under_construction",
                            Description = "Allows a user to view areas under construction. This is for development purposes only.",
                            SystemPermissionName = "Development: View areas under construction",
                            SystemPermissionType = "Development"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_post_images",
                            Description = "Allows users to post images",
                            SystemPermissionName = "Content: Post images",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_post_audio_clips",
                            Description = "Allows users to post audio clips",
                            SystemPermissionName = "Content: Post audio clips",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_post_videos",
                            Description = "Allows users to post videos",
                            SystemPermissionName = "Content: Post videos",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_delete_items",
                            Description = "Allows users to delete content",
                            SystemPermissionName = "Content: Delete items",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_create_boards",
                            Description = "Allows users to create new boards",
                            SystemPermissionName = "Content: Create boards",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_create_topics",
                            Description = "Allows users to create new topics",
                            SystemPermissionName = "Content: Create topics",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_create_threads",
                            Description = "Allows users to create new threads",
                            SystemPermissionName = "Content: Create threads",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_update_posts",
                            Description = "Allows users to update their own posts",
                            SystemPermissionName = "Content: Update posts",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_update_threads",
                            Description = "Allows users to update their own threads",
                            SystemPermissionName = "Content: Update threads",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_update_topics",
                            Description = "Allows users to update their own topics",
                            SystemPermissionName = "Content: Update topics",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_update_boards",
                            Description = "Allows users to update their own boards",
                            SystemPermissionName = "Content: Update boards",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_delete_topics",
                            Description = "Allows users to delete topics",
                            SystemPermissionName = "Content: Delete topics",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_delete_threads",
                            Description = "Allows users to delete threads",
                            SystemPermissionName = "Content: Delete threads",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_delete_posts",
                            Description = "Allows users to delete posts",
                            SystemPermissionName = "Content: Delete posts",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "cnt_delete_boards",
                            Description = "Allows users to delete boards",
                            SystemPermissionName = "Content: Delete boards",
                            SystemPermissionType = "Content"
                        },
                        new
                        {
                            SystemPermissionId = "vis_view_hidden_content",
                            Description = "Allows a user to view hidden content.",
                            SystemPermissionName = "Visibility: View hidden content",
                            SystemPermissionType = "Visibility"
                        },
                        new
                        {
                            SystemPermissionId = "vis_view_deleted_posts",
                            Description = "Allows a user to view deleted posts.",
                            SystemPermissionName = "Visibility: View deleted posts",
                            SystemPermissionType = "Visibility"
                        },
                        new
                        {
                            SystemPermissionId = "vis_view_banned_users",
                            Description = "Allows a user to view banned users.",
                            SystemPermissionName = "Visibility: View banned users",
                            SystemPermissionType = "Visibility"
                        },
                        new
                        {
                            SystemPermissionId = "vis_view_user_activity",
                            Description = "Allows a user to view user activity.",
                            SystemPermissionName = "Visibility: View user activity",
                            SystemPermissionType = "Visibility"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_create_posts",
                            Description = "Allows a user to create new posts. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Create posts",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_create_boards",
                            Description = "Allows a user to create new boards. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Create boards",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_create_threads",
                            Description = "Allows a user to create new threads. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Create threads",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_edit_posts",
                            Description = "Allows a user to edit existing posts. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Edit posts",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_edit_boards",
                            Description = "Allows a user to edit existing boards. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Edit boards",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_edit_threads",
                            Description = "Allows a user to edit existing threads. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Edit threads",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_delete_posts",
                            Description = "Allows a user to delete existing posts. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Delete posts",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_delete_boards",
                            Description = "Allows a user to delete existing boards. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Delete boards",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_delete_threads",
                            Description = "Allows a user to delete existing threads. All registered users have such permission, aside from guests, who may only post in authorised areas.",
                            SystemPermissionName = "Interactive: Delete threads",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_vote_in_polls",
                            Description = "Allows a user to vote in polls.",
                            SystemPermissionName = "Interactive: Vote in polls",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_upload_images",
                            Description = "Allows a user to upload images to the gallery.",
                            SystemPermissionName = "Interactive: Upload images",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_reply_to_posts",
                            Description = "Allows a user to reply to other users posts.",
                            SystemPermissionName = "Interactive: Reply to posts",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_edit_own_posts",
                            Description = "Allows a user to edit their own posts.",
                            SystemPermissionName = "Interactive: Edit own posts",
                            SystemPermissionType = "Interactivity"
                        },
                        new
                        {
                            SystemPermissionId = "interactive_delete_own_posts",
                            Description = "Allows a user to delete their own posts.",
                            SystemPermissionName = "Interactive: Delete own posts",
                            SystemPermissionType = "Interactivity"
                        });
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.Property<string>("ThreadId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HasNewPosts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfPosts")
                        .HasColumnType("int");

                    b.Property<string>("ThreadName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ThreadId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TopicId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.Property<string>("TopicId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BoardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TopicId");

                    b.HasIndex("BoardId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("RestApiServer.Db.UserPermissionEntry", b =>
                {
                    b.Property<string>("UserPermissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SystemPermissionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserPermissionId");

                    b.HasIndex("SystemPermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.UserRefreshTokenEntry", b =>
                {
                    b.Property<string>("UserRefreshTokenId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<DateTime>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserRefreshTokenId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("RestApiServer.Db.UserSessionTokenEntry", b =>
                {
                    b.Property<string>("UserSessionTokenId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AssignedToUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateRevoked")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserSessionTokenId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.ToTable("UserSessionTokens");
                });

            modelBuilder.Entity("RestApiServer.Db.Users.UserEntry", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AdminUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CityName")
                        .HasColumnType("longtext");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateMarkedForDelete")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ForumUserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMarkedForDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TotalPosts")
                        .HasColumnType("int");

                    b.Property<string>("UserFirstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserLastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserProfileImageBase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.CategoryEntry", "Category")
                        .WithMany("BoardsCreated")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RestApiServer.Db.GalleryItemEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("GalleryItems")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("RestApiServer.Db.PostEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.ThreadEntry", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("RestApiServer.Db.RequestEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "AssignedToUser")
                        .WithMany("AssignedSupportRequests")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("CreatedSupportRequests")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "LastUpdatedByUser")
                        .WithMany("UpdatedSupportRequests")
                        .HasForeignKey("LastUpdatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "ResolvedByUser")
                        .WithMany("ResolvedSupportRequests")
                        .HasForeignKey("ResolvedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedToUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastUpdatedByUser");

                    b.Navigation("ResolvedByUser");
                });

            modelBuilder.Entity("RestApiServer.Db.RolePermissionEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.PermissionEntry", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.RoleEntry", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("ThreadsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.TopicEntry", "Topic")
                        .WithMany("Threads")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.BoardEntry", "Board")
                        .WithMany("TopicsCreated")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "CreatedByUser")
                        .WithMany("TopicsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("RestApiServer.Db.UserPermissionEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.SystemPermissionEntry", "SystemPermission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("SystemPermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RestApiServer.Db.Users.UserEntry", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SystemPermission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestApiServer.Db.UserRefreshTokenEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestApiServer.Db.UserSessionTokenEntry", b =>
                {
                    b.HasOne("RestApiServer.Db.Users.UserEntry", "User")
                        .WithMany("UserSessionTokens")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RestApiServer.Db.BoardEntry", b =>
                {
                    b.Navigation("TopicsCreated");
                });

            modelBuilder.Entity("RestApiServer.Db.CategoryEntry", b =>
                {
                    b.Navigation("BoardsCreated");
                });

            modelBuilder.Entity("RestApiServer.Db.PermissionEntry", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.RoleEntry", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.SystemPermissionEntry", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("RestApiServer.Db.ThreadEntry", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RestApiServer.Db.TopicEntry", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("RestApiServer.Db.Users.UserEntry", b =>
                {
                    b.Navigation("AssignedSupportRequests");

                    b.Navigation("CreatedSupportRequests");

                    b.Navigation("GalleryItems");

                    b.Navigation("ResolvedSupportRequests");

                    b.Navigation("ThreadsCreated");

                    b.Navigation("TopicsCreated");

                    b.Navigation("UpdatedSupportRequests");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserSessionTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
